---
description: 
globs: src/**/*.ts, src/**/*.js, src/**/*.tsx, pages/api/**/*
alwaysApply: false
---
---
description: Backend Integration Rules and Guidelines
globs: src/**/*.ts, src/**/*.js, src/**/*.tsx, pages/api/**/*
alwaysApply: false
version: 1.0.0
last_updated: 2024-02-26
---
# Backend Integration Rules

## Purpose
This document guides the AI on how to handle backend integration-related requests and documentation updates.

## Documentation Reference
- Implementation patterns are defined in](/docs/backend-integration.md)
- Always refer to backend-integration.md before making any changes

## Primary API Endpoints

1. **Market Data Endpoints**
   - `/api/v1/market-data` - Market overview
   - `/api/v1/stock/{symbol}` - Stock details
   - `/api/v1/quarters` - Available quarters

2. **Analysis Endpoints**
   - `/api/v1/stock/{symbol}/analysis-history` - Analysis history
   - `/api/v1/analysis/{analysis_id}` - Analysis content
   - `/api/v1/stock/{symbol}/refresh-analysis` - Generate new analysis

3. **Portfolio Endpoints**
   - `/api/v1/portfolios` - List user portfolios
   - `/api/v1/portfolios/{id}` - Specific portfolio
   - `/api/v1/holdings` - User holdings

## Request Handling Rules

1. **For General Backend Integration Questions**
   ```
   1. Reference backend-integration.md
   2. Provide guidance based on existing patterns
   3. DO NOT modify any code or documentation without permission
   ```

2. **For Change Requests**
   ```
   1. Confirm explicit request for backend system change
   2. Review backend-integration.md for current implementation
   3. Implement requested changes
   4. Wait for user to confirm functionality
   5. Only update backend-integration.md after user confirmation
   ```

## Change Implementation Process

1. **When User Requests Changes**
   ```
   ✅ DO:
   - Get explicit confirmation that backend change is needed
   - Implement changes following backend-integration.md patterns
   - Test integration points thoroughly
   - Ask user to verify functionality
   - Update docs only after user confirms

   ❌ DON'T:
   - Change API endpoints without user confirmation
   - Modify authentication mechanisms without approval
   - Change data structures without understanding impact
   - Create new endpoints that deviate from patterns
   ```

2. **Best Practices for API Calls**
   ```
   ✅ DO:
   - Use React Query for data fetching
   - Implement proper loading states
   - Handle errors gracefully with user feedback
   - Use TypeScript interfaces for API responses
   - Follow RESTful patterns from documentation

   ❌ DON'T:
   - Use direct fetch without error handling
   - Ignore response types
   - Mix different API calling patterns
   - Handle retries inconsistently
   ```

## Implementation Examples

1. **Fetching Market Data**
   ```typescript
   // Example pattern for fetching market data
   const fetchMarketData = async (quarter?: string) => {
     const queryParams = new URLSearchParams();
     if (quarter) queryParams.append('quarter', quarter);
     
     try {
       const response = await fetch(`/api/v1/market-data?${queryParams}`);
       if (!response.ok) {
         throw new Error(`Error: ${response.status}`);
       }
       return await response.json();
     } catch (error) {
       console.error('Failed to fetch market data:', error);
       throw error;
     }
   };
   ```

2. **React Query Implementation**
   ```typescript
   // Example pattern for React Query implementation
   import { useQuery } from '@tanstack/react-query';
   
   export function useMarketData(quarter?: string) {
     return useQuery({
       queryKey: ['marketData', quarter],
       queryFn: () => fetchMarketData(quarter),
       staleTime: 60 * 60 * 1000, // 1 hour
     });
   }
   ```

## Documentation Update Process

1. Always get user confirmation before updating documentation
2. Ensure any documentation updates match implemented functionality
3. Follow the format and structure of existing documentation
4. Include code examples for new functionality