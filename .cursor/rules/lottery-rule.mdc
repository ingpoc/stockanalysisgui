---
description: Decentralized Lottery System Rules
globs: src/**/*.ts, src/**/*.js, src/**/*.tsx
alwaysApply: false
---
---
description: Decentralized Lottery Systobs: src/**/*.ts, src/**/*.js, src/**/*.tsx
version: 1.0.0
last_updated: 2024-02-24
---
# Decentralized Lottery Rules

## Purpose
This document guides the AI on when and how to apply lottery-related patterns and changes.

## Documentation Reference
- All implementation patterns are defined in [lottery.md](mdc:stockanalysisgui/stockanalysisgui/stockanalysisgui/decentralized-lottery/docs/lottery.md)
- ALWAYS refer to lottery.md before making any changes

## When to Apply

1. **ation**
   - When adding new lottery types
   - When modifying lottery initialization
   - When handling lottery states
   - When managing lottery accounts
   → See lottery.md#program-constants

2. **Type Management**
   - When handling Rust/TypeScript mappings
   - When working with account fields
   - When managing lottery states
   - When dealing with field naming
   → See lottery.md#type-consistency-rules

3. **Account Operations**
   - When deserializing accounts
   - When handling PublicKey conversions
   - When managing lottery state
   - When working with account fields
   → See lottery.md#account-handling

4. **Error Prevention**
   - When validating inputs
   - When handling type conversions
   - When managing state transitions
   - When dealing with edge cases
   → See lottery.md#error-prevention

## Change Management Process

1. **Before Changes**
   ```
   1. Review lottery.md completely
   2. Check existing patterns
   3. Verify account structures
   4. Validate type mappings
   ```

2. **During Implementation**
   ```
   1. Follow patterns from lottery.md
   2. Maintain type consistency
   3. Handle all error cases
   4. Verify account handling
   ```

3. **After Implementation**
   ```
   1. Test functionality thoroughly
   2. Verify type conversions
   3. Check error handling
   4. Update docs if needed (with approval)
   ```

## Documentation Rules

1. **When to Update Docs**
   ```
   ONLY update lottery.md when:
   1. User explicitly requests changes
   2. New patterns are approved
   3. Changes are verified working
   4. User confirms documentation needs
   ```

2. **Doc Update Process**
   ```
   1. Get explicit user approval
   2. Update only relevant sections
   3. Maintain existing structure
   4. Cross-reference related docs
   ```

## Related Rules
- For component lifecycle: See [component-lifecycle-rule.mdc]
- For data management: See [data-management-rule.mdc]
- For error handling: See [error-handling-rule.mdc]

