---
description: Decentralized Lottery System Rules
globs: src/**/*.ts, src/**/*.js, src/**/*.tsx
alwaysApply: false
---
---
description: Decentralized Lottery System Rules
globs: src/**/*.ts, src/**/*.js, src/**/*.tsx
alwaysApply: false
version: 1.0.0
last_updated: 2024-02-24
---

# Decentralized Lottery Rules

## Purpose
This document guides the AI on when and how to apply lottery-related patterns and changes.

## Documentation Reference
- All implementation patterns are defined in [lottery.md](/docs/lottery.md)
- ALWAYS refer to lottery.md before making any changes

## When to Apply

1. **Program Integration**
   - When adding new lottery types
   - When modifying lottery initialization
   - When handling lottery states
   - When managing lottery accounts
   → See lottery.md#program-constants

2. **Type Management**
   - When handling Rust/TypeScript mappings
   - When working with account fields
   - When managing lottery states
   - When dealing with field naming
   → See lottery.md#type-consistency-rules

3. **Account Operations**
   - When deserializing accounts
   - When handling PublicKey conversions
   - When managing lottery state
   - When working with account fields
   → See lottery.md#account-handling

4. **Error Prevention**
   - When validating inputs
   - When handling type conversions
   - When managing state transitions
   - When dealing with edge cases
   → See lottery.md#error-prevention

## Change Management Process

1. **Adding New Lottery Features**
   ```
   ✅ DO:
   - Verify the request with the user
   - Check existing patterns in lottery.md
   - Implement consistent with current architecture
   - Test all interactions
   - Update documentation if confirmed working

   ❌ DON'T:
   - Create new lottery types without thorough understanding
   - Modify account structures without checking program compatibility
   - Introduce inconsistent naming conventions
   - Skip validation checks
   ```

2. **Modifying Lottery UI Components**
   ```
   ✅ DO:
   - Follow component patterns in /src/components/lottery
   - Maintain consistent styling with design system
   - Handle loading and error states
   - Ensure mobile responsiveness
   - Validate all inputs

   ❌ DON'T:
   - Use deprecated Solana APIs
   - Mix UI component styles
   - Hardcode values that should be configurable
   - Ignore transaction state management
   ```

## Implementation References

1. **Key Files**
   - `/src/components/lottery/` - UI components
   - `/src/hooks/use-lottery-program.ts` - Program interaction hook
   - `/src/lib/solana/program.ts` - Solana program utilities
   - `/src/types/lottery.ts` - Type definitions

2. **Required Libraries**
   - @solana/web3.js
   - @project-serum/anchor 
   - @solana/spl-token

3. **Error Handling Guidelines**
   - Provide clear user feedback for transactions
   - Handle wallet connection errors gracefully
   - Implement proper transaction confirmation states
   - Log detailed errors on the console for debugging