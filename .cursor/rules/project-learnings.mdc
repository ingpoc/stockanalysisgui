---
description: Building the project
globs: src/**/*.ts, src/**/*.js, src/**/*.tsx
---
# Project Development Guidelines

## Core Principles
- Always refer to `@appkit.md` for appkit documentation
- Update/Edit documentation as needed
- Maintain verification history
- Follow systematic package verification

## Development Workflow

### Before Starting Any New Task
1. **Review Past Lessons**
   - Check "Lessons" section for relevant insights
   - Review previous mistakes and corrections
   - Apply learned best practices

2. **Review Knowledge Files**
   - For third-party packages: check `@docs/<package-name>.md`
   - Verify existing documentation accuracy
   - Note any missing documentation needs

3. **Prepare Scratchpad** (in `@.cursorrules`)
   - Clear old, unrelated content
   - Write task summary and goals
   - Plan steps with todo markers:
     ```markdown
     [ ] Task 1
     [X] Task 2 (completed)
     ```

### During the Task
1. **Track Progress**
   - Update scratchpad regularly
   - Document completed steps
   - Note any blockers or issues

2. **Handle Third-Party Packages**
   - Check `@docs/<package-name>.md` first
   - Inspect package implementation in `node_modules`
   - Document findings in package docs
   - Update documentation if discrepancies found

3. **Document Mistakes**
   - Record errors in scratchpad
   - Detail what went wrong
   - Document the solution
   - Update relevant documentation

4. **Capture Insights**
   - Add reusable solutions to "Lessons"
   - Document library workarounds
   - Note common pitfalls

### After Completing a Task
1. **Reflect**
   - Write brief reflection in scratchpad
   - Note what worked/didn't work
   - Include package-specific learnings

2. **Update Documentation**
   - Add key takeaways to "Lessons"
   - Update package documentation
   - Review documentation accuracy

3. **Maintain Project Structure**
   - Update relevant sections
   - Document new files/changes
   - Keep documentation index current

## Tool Usage Guidelines

### Strategic Tool Use
1. **MCP Servers**
   - Web search for unfamiliar errors
   - StackOverflow for syntax help
   - GitHub issues for package problems

2. **Documentation Tools**
   - Note tool usage in scratchpad
   - Document learnings
   - Share useful findings

## Version Control Best Practices

### Commit Guidelines
1. **Multiline Commits**
   - Write message in file
   - Use `git commit -F <filename>`
   - Include "[Cursor] " prefix
   - Delete message file after

2. **Commit Structure**
   - Make small, atomic commits
   - Clear, descriptive messages
   - Include documentation updates
   - Reference related issues

3. **Documentation Updates**
   - Include `@docs/<package-name>.md`
   - Update after significant changes
   - Document at milestones

### Environment Management
- Activate Python virtual environment
  ```bash
  ./venv/bin/activate
  ```
- Run Python scripts in venv
- Maintain environment consistency

## Avoiding Hallucinations

### Verification Process
1. **Package Details**
   - Check `node_modules` first
   - Review knowledge files
   - Verify with documentation

2. **Information Sources**
   - Use MCP servers for verification
   - Check official documentation
   - Verify community insights

3. **Best Practices**
   - Never assume package behavior
   - Verify before implementing
   - Document verification results

### Documentation Standards
1. **Package Documentation**
   - Version information
   - Verified exports
   - Usage examples
   - Common issues
   - Solutions

2. **Update Process**
   - Regular verification
   - Version tracking
   - Discrepancy notes
   - Solution documentation