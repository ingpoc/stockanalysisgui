---
description: Rules for Appkit integration with multichain support for solana
globs: 
---
# AppKit Solana Integration Rules and Best Practices

## Core Integration Rules

1. **Wallet Connection**
   - Always use `useWallet` hook from AppKit for Solana wallet connections
   - Implement proper connection state management
   - Handle wallet connection errors gracefully
   - Support multiple Solana wallet providers (Phantom, Solflare, etc.)
   - Use React Context for wallet state management
   - Implement proper wallet auto-connect functionality

2. **Transaction Handling**
   - Use AppKit's transaction builders for all Solana transactions
   - Implement proper transaction signing flow
   - Always include proper error handling for failed transactions
   - Use optimistic updates for better UX
   - Implement proper transaction confirmation tracking
   - Use React Query for transaction state management
   - Implement proper transaction retry mechanism

3. **State Management**
   - Use AppKit's built-in state management for Solana accounts
   - Implement proper caching mechanisms for account data
   - Use `useAccount` hook for account data subscriptions
   - Implement proper loading states
   - Utilize React Query for data fetching and caching
   - Implement proper state persistence

4. **Security Guidelines**
   - Never store private keys in the frontend
   - Implement proper RPC endpoint management
   - Use environment variables for sensitive configuration
   - Implement rate limiting for RPC calls
   - Validate all transaction inputs
   - Implement proper CORS policies
   - Use secure RPC endpoints with API keys

## Next.js Specific Guidelines

1. **Project Structure**
   ```
   src/
   ├── app/                    # Next.js app directory
   ├── components/             # React components
   │   ├── ui/                # UI components
   │   └── wallet/            # Wallet-specific components
   ├── hooks/                 # Custom hooks
   │   ├── useWallet.ts       # Wallet hook
   │   └── useSolana.ts       # Solana utilities
   ├── config/                # Configuration
   │   └── solana.ts          # Solana config
   ├── lib/                   # Utilities
   │   └── solana/            # Solana utilities
   └── types/                 # TypeScript types
   ```

2. **Environment Setup**
   ```
   NEXT_PUBLIC_SOLANA_RPC_URL=
   NEXT_PUBLIC_SOLANA_NETWORK=
   NEXT_PUBLIC_APPKIT_PROJECT_ID=
   ```

1## Implementation Guidelines

1. **AppKit Setup**
   ```typescript
   // app/providers.tsx or equivalent setup file
   import { createAppKit } from '@reown/appkit';
   import { SolanaAdapter } from '@reown/appkit-adapter-solana';
   import { WagmiAdapter } from '@reown/appkit-adapter-wagmi';
   import { SolflareWalletAdapter, PhantomWalletAdapter } from '@solana/wallet-adapter-wallets';
   
   // Create Solana adapter with wallet support
   const solanaAdapter = new SolanaAdapter({
     wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()]
   });

   // Create Wagmi adapter for EVM support
   const wagmiAdapter = new WagmiAdapter({
     projectId: process.env.NEXT_PUBLIC_PROJECT_ID!,
   });

   // Create AppKit instance
   export const appkit = createAppKit({
     adapters: [wagmiAdapter, solanaAdapter],
     networks: [mainnet, arbitrum, sepolia, solana, solanaTestnet, solanaDevnet],
     projectId: process.env.NEXT_PUBLIC_PROJECT_ID!,
     metadata: {
       name: 'Your App Name',
       description: 'Your App Description',
       url: 'https://your-app-url.com',
       icons: ['https://your-app-icon.com']
     }
   });
   ```

2. **Hooks Usage**
   ```typescript
   // hooks/useSolanaWallet.ts
   import { useWallet, useConnect, useDisconnect } from '@reown/appkit';
   
   export function useSolanaWallet() {
     const wallet = useWallet();
     const { connect } = useConnect();
     const { disconnect } = useDisconnect();
     
     return {
       wallet,
       connect,
       disconnect,
       isConnected: !!wallet.publicKey,
       publicKey: wallet.publicKey?.toString()
     };
   }
   ```

3. **Transaction Handling**
   ```typescript
   // hooks/useSolanaTransaction.ts
   import { useWallet } from '@reown/appkit';
   import { useQuery, useMutation } from '@tanstack/react-query';
   import { Connection, Transaction, SystemProgram } from '@solana/web3.js';
   
   export function useSendTransaction() {
     const { publicKey, signTransaction } = useWallet();
     
     return useMutation({
       mutationFn: async ({ to, amount }: { to: string; amount: number }) => {
         if (!publicKey || !signTransaction) throw new Error('Wallet not connected');
         
         const transaction = new Transaction().add(
           SystemProgram.transfer({
             fromPubkey: publicKey,
             toPubkey: new PublicKey(to),
             lamports: amount
           })
         );
         
         const signed = await signTransaction(transaction);
         // Send transaction logic
       }
     });
   }
   ```

4. **Balance and Account Data**
   ```typescript
   // hooks/useSolanaAccount.ts
   import { useWallet } from '@reown/appkit';
   import { useQuery } from '@tanstack/react-query';
   import { Connection } from '@solana/web3.js';
   
   export function useSolanaBalance() {
     const { publicKey } = useWallet();
     const connection = new Connection(process.env.NEXT_PUBLIC_SOLANA_RPC_URL!);
     
     return useQuery({
       queryKey: ['solana-balance', publicKey?.toString()],
       queryFn: async () => {
         if (!publicKey) throw new Error('Wallet not connected');
         return connection.getBalance(publicKey);
       },
       enabled: !!publicKey
     });
   }
   ```

## Performance Requirements

1. **Response Times**
   - Wallet connection < 2 seconds
   - Transaction submission < 1 second
   - Account data loading < 500ms
   - State updates < 100ms
   - Initial page load < 3 seconds
   - Time to Interactive < 4 seconds

2. **Resource Usage**
   - Minimize RPC calls using React Query
   - Implement proper caching with staleTime and cacheTime
   - Optimize memory usage with proper cleanup
   - Implement proper connection pooling
   - Use proper bundling and code splitting
   - Implement proper error boundaries

// ... rest of existing code ...