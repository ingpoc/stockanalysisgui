---
description:  Cursor Rules for Stock Analysis UI with Crypto Lottery & Solana
globs: src/**/*.tsx, src/**/*.ts, src/**/*.js, src/**/*.jsx, src/**/*.json
---
### Refined Cursor Rules for Stock Analysis UI with Crypto Lottery & Solana

**### Security First Protocol 🔒**

security:
  authentication:
    - Wallet sessions for lottery/crypto features must expire after **10 minutes** of inactivity (increased security for financial features).
    - All Solana transactions (stock & lottery related) require explicit user approval.
    - CSP headers must block inline scripts/styles.
    - **Implement nonce verification for all wallet interactions to prevent replay attacks.**
  data:
    - Validate all RPC responses (stock & Solana) with Zod schemas.
    - Sanitize all user inputs using DOMPurify, especially in lottery entry forms.
    - Encrypt sensitive data in IndexedDB, including wallet-related information and lottery participation details.
  solana:
    - **Strictly verify PDAs for all program interactions in both stock analysis and lottery programs.**
    - Validate account ownership before **any** Solana transactions (stock & lottery).
    - Use versioned transactions for forward compatibility.
    - **Implement robust transaction simulations before user confirmation for lottery interactions.**
    - **Audit all Solana program interactions for potential vulnerabilities (re-entrancy, etc.).**

**### Performance Optimization 🚀**

performance:
  rendering:
    - Virtualize lists with >50 items (stock tables, lottery history, etc.).
    - Debounce rapid UI updates (stock charts, lottery animations).
    - Use `React.memo` and `useCallback` for complex components, especially in lottery UI and data displays.
  data:
    - Cache Solana account data for **15 seconds** for lottery data (more real-time for lottery).
    - Cache stock account data for 30s (SWR/React Query).
    - Compress RPC payloads with Brotli.
    - Batch Solana `getMultipleAccounts` calls, especially for fetching lottery participant data.
  assets:
    - Convert images to WebP with <4:1 compression ratio.
    - Lazy load non-critical JS/CSS, especially for lottery-specific assets.
    - Inline critical CSS for above-the-fold content.
    - **Optimize Solana transaction processing to minimize UI blocking.**

**### Solana & Appkit Integration Standards ⚙️**

solana:
  transactions:
    - Preflight checks required for **all** transactions (stock & lottery).
    - Handle versioned transactions.
    - Max transaction timeout: **20 seconds** for lottery transactions (time-sensitive).
    - Max transaction timeout: 30 seconds for stock transactions.
    - **Use Appkit's transaction abstraction for consistent transaction handling across features.**
  error:
    - Handle 4100 (Unauthorized) errors gracefully.
    - Detect and recover from blockhash expiry.
    - Track transaction confirmation depth.
    - **Implement specific error handling for lottery program errors (e.g., insufficient funds, invalid entry).**
    - **Use Appkit's error handling utilities for Solana interactions.**
  wallet:
    - Support Phantom/Backpack/Solflare.
    - Handle wallet disconnects in all flows (stock & lottery).
    - Validate wallet network (Mainnet/Devnet).
    - **Ensure Appkit wallet adapters are correctly configured and utilized.**
    - **Implement wallet connection persistence using Appkit's session management.**

**### Code Quality Enforcement 📐**

architecture:
  components:
    - Atomic design pattern (Atoms/Molecules/Organisms).
    - Colocate GraphQL queries with components (if applicable for stock data).
    - Isolate Solana program interactions in **dedicated services** (e.g., `solana-lottery-service.ts`, `solana-stock-service.ts`).
    - **Abstract Appkit functionalities into reusable hooks or services.**
  state:
    - Use Zustand for global state (consider separate stores for stock and lottery state if complexity increases).
    - TanStack Query for server state (stock & lottery data).
    - Avoid prop drilling >3 levels.
    - **Manage lottery-specific state (e.g., ticket selection, lottery round info) with Zustand.**
  types:
    - Strict TypeScript (no implicit any).
    - Generate types from Solana IDL for **both stock and lottery programs.**
    - Validate runtime types with Zod.
    - **Define clear types for Appkit-related data structures and interactions.**

**### UI/UX Standards 🎨**

ui:
  responsive:
    - Mobile-first breakpoints: 320/768/1024/1440px.
    - Touch targets ≥48x48px.
    - Prefer rem units over px.
  accessibility:
    - WCAG 2.1 AA compliance.
    - Screen reader support for charts and lottery UI elements.
    - Keyboard navigation support.
  charts:
    - WebGL for real-time stock visualization.
    - Canvas fallback for complex visualizations.
    - Debounce zoom/pan events.
  lottery:
    - **Visually engaging and clear lottery UI.**
    - **Provide clear feedback on lottery actions (ticket purchase, entry confirmation, results).**
    - **Ensure lottery UI is accessible and responsive.**
    - **Consider animations and visual cues for lottery events (drawing, results reveal).**

**### Error Handling 🚨**

errors:
  recovery:
    - Automatic retry for failed RPC calls (max 3x).
    - Fallback UI for failed data loads.
    - Transaction error explanations (stock & lottery).
    - **Specific error recovery for lottery operations (e.g., handle race conditions in ticket purchase).**
  logging:
    - Mask sensitive data in logs.
    - Track errors with unique IDs.
    - Console errors must include context.
    - **Log lottery-specific events and errors for debugging and monitoring.**
  boundaries:
    - Error boundaries around Solana operations (stock & lottery).
    - Network error detection.
    - Graceful service degradation.
    - **Implement error boundaries specifically for lottery components.**

**### Testing Requirements 🧪**

testing:
  unit:
    - 90% coverage for Solana services (stock & lottery).
    - Mock Solana Web3.js and **Appkit** responses.
    - Snapshot critical components.
    - **Unit test lottery logic and state management.**
  e2e:
    - Test wallet connection flows (stock & lottery).
    - Validate transaction signing (stock & lottery).
    - Performance budgets for key pages.
    - **E2E tests for lottery participation, ticket purchase, and result verification flows.**
    - **Test Appkit integration for wallet and transaction flows.**
  security:
    - OWASP ZAP baseline scans.
    - Solana program interaction fuzzing (stock & lottery programs).
    - Dependency vulnerability checks.
    - **Security audits specifically for lottery smart contract interactions.**

**### Documentation Rules 📖**

docs:
  components:
    - JSDoc for complex logic.
    - Storybook stories for UI components (stock & lottery components).
    - ADR for architectural decisions, especially regarding Appkit and Solana integration.
  api:
    - OpenAPI spec for REST endpoints (stock data).
    - Annotated Solana IDL for **both stock and lottery programs.**
    - Error code reference.
    - **Document Appkit usage and integration patterns.**
    - **Document lottery program interactions and state management.**
  dev:
    - Setup troubleshooting guide.
    - RPC endpoint configuration.
    - Wallet testing checklist.
    - **Lottery testing and deployment guide.**
    - **Appkit setup and usage guide within the project.**

**### Optimization Exceptions 🚧**

perf-exceptions:
  allowed:
    - WASM for cryptographic operations (if needed for lottery).
    - Web Workers for transaction processing (stock & lottery).
    - SIMD for large dataset analysis (stock data).
  banned:
    - `document.write`.
    - synchronous XHR.
    - unoptimized canvas operations.
    - **Avoid blocking UI thread during lottery operations (e.g., ticket drawing animation).**

These refined rules are more specific to your project's expanded scope, incorporating the crypto lottery and Appkit functionalities alongside the existing stock analysis features. They emphasize security, performance, and code quality best practices relevant to your integrated application.

Do you have any specific areas within the lottery or Appkit integration where you'd like to focus the Cursor rules further? Let me know if you have any other questions or need further adjustments!
