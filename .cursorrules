# Frontend Project-Specific Instructions for Cursor AI

## General Guidelines
- Write clean, maintainable TypeScript/React code
- Follow Next.js 15.x app router conventions
- Use proper TypeScript types and interfaces
- Implement responsive design patterns
- Follow accessibility (a11y) best practices

## Project Structure
- Strict directory structure:
  - `src/` - Source code root
    - `app/` - Next.js app router pages and layouts
      - `layout.tsx` - Root layout with providers
      - `page.tsx` - Root page with components
      - `(auth)/` - Authentication group
        - `login/` - Login page with AppKit button
      - `(protected)/` - Protected routes group
        - `layout.tsx` - Protected layout
        - `dashboard/` - Dashboard pages
        - `analysis/` - Analysis pages
        - `technical-analysis/` - Technical analysis pages
        - `ai-insights/` - AI insights pages
    - `components/` - React components
      - `ui/` - shadcn/ui components
      - `ConnectButton.tsx` - AppKit button wrapper
      - `ConnectionInfo.tsx` - Account/wallet info display
      - `ActionButtons.tsx` - Connection actions
      - `EventHandler.tsx` - Event monitoring
    - `config/` - Configuration files
      - `index.ts` - AppKit and adapters configuration
    - `context/` - React context providers
      - `index.tsx` - Provider setup with cookie state
    - `middleware.ts` - Route protection middleware
    - `types/` - TypeScript type definitions
    - `styles/` - Global styles and CSS modules
  - `public/` - Static assets

## Authentication Structure
auth.files.required:
  - src/config/index.ts:
      description: "AppKit and adapters configuration"
      required_exports:
        - wagmiAdapter
        - solanaWeb3JsAdapter
        - networks
        - config
        - modal
      implementation_notes:
        - Use cookieStorage for persistence
        - Configure both EVM and Solana adapters
        - Define multichain networks array
        - Create AppKit modal with both adapters
        - Set up proper metadata
  
  - src/context/index.tsx:
      description: "Context provider with cookie state"
      required_components:
        - WagmiProvider
        - QueryClientProvider
      required_exports:
        - ContextProvider
      implementation_notes:
        - Initialize state from cookies
        - Keep provider setup minimal
        - No custom providers needed
  
  - src/components/ConnectButton.tsx:
      description: "AppKit button wrapper"
      required_components:
        - appkit-button
      implementation_notes:
        - Keep component minimal
        - Use built-in AppKit button
  
  - src/middleware.ts:
      description: "Route protection for both chains"
      implementation_notes:
        - Check both chain cookies
        - Handle public routes
        - Proper redirection logic

## Authentication Flow
auth.flow:
  - Initial Connection:
    - Use AppKit button for connection
    - Support both EVM and Solana chains
    - Cookie-based state persistence
  
  - State Management:
    - Use AppKit hooks exclusively:
      - useAppKitAccount: Connection state
      - useAppKitState: Loading state
      - useAppKitEvents: Event monitoring
      - useAppKitTheme: Theme management
      - useWalletInfo: Wallet details
      - useDisconnect: Disconnection
      - useAppKit: Core functionality
      - useAppKitNetwork: Network management
  
  - Loading States:
    - Use AppKit's built-in loading states
    - Handle chain switching transitions
    - Proper connection state transitions

## Required Environment Variables
env.required:
  - NEXT_PUBLIC_PROJECT_ID:
      description: "Reown AppKit project ID"
      required: true
  - NEXT_PUBLIC_APP_URL:
      description: "Frontend application URL"
      required: true
  - NEXT_PUBLIC_SOLANA_RPC_URL:
      description: "Solana RPC URL"
      required: true

## Security Requirements
security.rules:
  - Use cookieStorage for state persistence
  - Initialize state from cookies in layout
  - Follow AppKit's multichain security model
  - Use built-in AppKit security features
  - Proper error handling for both chains
  - Clean disconnection handling

## Best Practices
best.practices:
  - Use AppKit hooks for state management
  - Monitor connection events with useAppKitEvents
  - Handle network switching with useAppKitNetwork
  - Use built-in theme management
  - Follow AppKit security guidelines
  - Implement proper error handling
  - Keep components simple and focused
  - Let AppKit handle connection flows
  - Use cookie-based state management
  - Follow multichain best practices

## Reference Documentation
references:
  - title: "AppKit Multichain Example"
    url: "https://github.com/reown-com/appkit-web-examples/tree/main/nextjs/next-multichain-app-router"
    key_files:
      - src/config/index.ts
      - src/context/index.tsx
      - src/app/layout.tsx
      - src/components/ConnectButton.tsx
  - title: "AppKit Documentation"
    url: "https://docs.reown.com/appkit" 