# Frontend Project-Specific Instructions for Cursor AI

## General Guidelines
- Write clean, maintainable TypeScript/React code
- Follow Next.js 15.x app router conventions
- Use proper TypeScript types and interfaces
- Implement responsive design patterns
- Follow accessibility (a11y) best practices

## Project Structure
- Strict directory structure:
  - `src/app/` - Next.js app router pages and layouts
  - `src/components/` - React components
    - `ui/` - shadcn/ui components
    - `shared/` - Reusable components
  - `src/lib/` - Utility functions and hooks
  - `src/config/` - Configuration files
    - `index.ts` - AppKit and Wagmi configuration
  - `src/context/` - React context providers
    - `index.tsx` - AppKit context provider
  - `src/types/` - TypeScript type definitions
  - `src/styles/` - Global styles and CSS modules
  - `public/` - Static assets

## Authentication Structure
auth.files.location: src/config/** and src/context/**
auth.files.pattern: 
  - "**/config/index.ts"
  - "**/context/index.tsx"
  - "**/app/auth/**"
  - "**/components/auth/**"

# Required Configuration Files
auth.required.location:
  - config/index.ts      # AppKit and Wagmi configuration
  - context/index.tsx    # AppKit context provider
  - app/auth/login/page.tsx  # Login page
  - components/auth/connect-button.tsx  # Connect button component

# Exceptions for Next.js pages and middleware
auth.exceptions:
  - next.config.js  # Next.js webpack configuration
  - middleware.ts   # Next.js requires at root

## Required Environment Variables
- NEXT_PUBLIC_PROJECT_ID=09fccb634332c292a3cb889c0592b928
- NEXT_PUBLIC_APP_URL=http://localhost:3000

## Component Guidelines
- Use TypeScript for all components
- Implement proper prop types
- Follow functional component patterns
- Use proper error boundaries
- Implement loading states
- Handle edge cases

## State Management
- Use React hooks for local state
- Use AppKit hooks for wallet state
- Use TanStack Query for data fetching
- Handle loading and error states

## Styling Requirements
- Use Tailwind CSS for styling
- Follow design system tokens
- Implement dark mode support
- Use CSS modules for component-specific styles

## AppKit Integration
- Use AppKit hooks for wallet interactions
- Implement proper error handling
- Use environment variables for project ID
- Handle loading and error states
- Cache wallet state appropriately

## Performance Requirements
- Implement code splitting
- Use proper image optimization
- Implement lazy loading
- Monitor and optimize bundle size
- Use proper meta tags for SEO

## Documentation
- Document components with proper JSDoc
- Maintain README.md
- Document custom hooks
- Add comments for complex logic

## Security
- Implement proper CORS settings
- Handle authentication properly
- Sanitize user inputs
- Follow security best practices

## Accessibility
- Follow WCAG guidelines
- Implement proper ARIA labels
- Ensure keyboard navigation
- Test with screen readers

# Documentation
auth.description: |
  Authentication configuration follows the Reown AppKit structure:
  
  1. Configuration (src/config/index.ts):
     - AppKit configuration
     - Wagmi adapter setup
     - Network configuration
  
  2. Context Provider (src/context/index.tsx):
     - AppKit provider setup
     - Wagmi provider
     - Query client provider
  
  3. Components:
     - Login page in app/auth/login/page.tsx
     - Connect button in components/auth/connect-button.tsx
  
  4. Additional Configuration:
     - next.config.js for webpack setup
     - middleware.ts for protected routes
  
  Reference:
  - https://docs.reown.com/appkit/next/core/installation
  - https://github.com/reown-com/appkit-web-examples/tree/main/nextjs/next-multichain-app-router 