### Security First Protocol 🔒
security:
  authentication:
    - Wallet sessions must expire after 15 minutes of inactivity
    - All Solana transactions require explicit user approval
    - CSP headers must block inline scripts/styles
  data:
    - Validate all RPC responses with Zod schemas
    - Sanitize all user inputs using DOMPurify
    - Encrypt sensitive data in IndexedDB
  solana:
    - Verify PDAs for all program interactions
    - Validate account ownership before transactions
    - Use versioned transactions for forward compatibility

### Performance Optimization 🚀
performance:
  rendering:
    - Virtualize lists with >50 items
    - Debounce rapid UI updates (e.g., stock charts)
    - Use React.memo for complex components
  data:
    - Cache Solana account data for 30s (SWR/React Query)
    - Compress RPC payloads with Brotli
    - Batch Solana getMultipleAccounts calls
  assets:
    - Convert images to WebP with <4:1 compression ratio
    - Lazy load non-critical JS/CSS
    - Inline critical CSS for above-the-fold content

### Solana Integration Standards ⚙️
solana:
  transactions:
    - Preflight checks required for all transactions
    - Handle versioned transactions
    - Max transaction timeout: 30 seconds
  error:
    - Handle 4100 (Unauthorized) errors gracefully
    - Detect and recover from blockhash expiry
    - Track transaction confirmation depth
  wallet:
    - Support Phantom/Backpack/Solflare
    - Handle wallet disconnects in all flows
    - Validate wallet network (Mainnet/Devnet)

### Code Quality Enforcement 📐
architecture:
  components:
    - Atomic design pattern (Atoms/Molecules/Organisms)
    - Colocate GraphQL queries with components
    - Isolate Solana program interactions in services
  state:
    - Use Zustand for global state
    - TanStack Query for server state
    - Avoid prop drilling >3 levels
  types:
    - Strict TypeScript (no implicit any)
    - Generate types from Solana IDL
    - Validate runtime types with Zod

### UI/UX Standards 🎨
ui:
  responsive:
    - Mobile-first breakpoints: 320/768/1024/1440px
    - Touch targets ≥48x48px
    - Prefer rem units over px
  accessibility:
    - WCAG 2.1 AA compliance
    - Screen reader support for charts
    - Keyboard navigation support
  charts:
    - WebGL for real-time stock visualization
    - Canvas fallback for complex visualizations
    - Debounce zoom/pan events

### Error Handling 🚨
errors:
  recovery:
    - Automatic retry for failed RPC calls (max 3x)
    - Fallback UI for failed data loads
    - Transaction error explanations
  logging:
    - Mask sensitive data in logs
    - Track errors with unique IDs
    - Console errors must include context
  boundaries:
    - Error boundaries around Solana operations
    - Network error detection
    - Graceful service degradation

### Testing Requirements 🧪
testing:
  unit:
    - 90% coverage for Solana services
    - Mock Solana Web3.js responses
    - Snapshot critical components
  e2e:
    - Test wallet connection flows
    - Validate transaction signing
    - Performance budgets for key pages
  security:
    - OWASP ZAP baseline scans
    - Solana program interaction fuzzing
    - Dependency vulnerability checks

### Documentation Rules 📖
docs:
  components:
    - JSDoc for complex logic
    - Storybook stories for UI components
    - ADR for architectural decisions
  api:
    - OpenAPI spec for REST endpoints
    - Annotated Solana IDL
    - Error code reference
  dev:
    - Setup troubleshooting guide
    - RPC endpoint configuration
    - Wallet testing checklist

### Optimization Exceptions 🚧
perf-exceptions:
  allowed:
    - WASM for cryptographic operations
    - Web Workers for transaction processing
    - SIMD for large dataset analysis
  banned:
    - document.write
    - synchronous XHR
    - unoptimized canvas operations

### Deployment Rules 🚀
deployment:
  security:
    - SRI hashes for all third-party scripts
    - HSTS with 1 year max-age
    - Permissions-Policy header restrictions
  monitoring:
    - Real-user metrics collection
    - Solana RPC performance tracking
    - Error budget tracking
  build:
    - Tree-shake Solana Web3.js imports
    - Code split by feature flags
    - Analyze bundle with Source Map Explorer